#!/bin/sh
. /sbin/record.common

pidof -o $$ record > /dev/null && die "is already running"


RECORD_FLAG="/tmp/record.$$"

CONFIG_FILE="/etc/web.conf"                                                        
[ -f "$CONFIG_FILE" ] && . $CONFIG_FILE

while getopts "c:d:f:h:m:n:p:s:t:u:v:w:xz:" flag; do
	case "$flag" in
		c) stream_number=$OPTARG ;;
		d) record_limit=$OPTARG ;;
		f) stream_fps=$OPTARG ;;
		h) stream_height=$OPTARG ;;
		m) record_mount=$OPTARG ;;
		n) record_filename=$OPTARG ;;
		p) rtsp_password=$OPTARG ;;
		s) record_device_path=$OPTARG ;;
		t) record_duration=$OPTARG ;;
		u) rtsp_username=$OPTARG ;;
		v) record_videofmt=$OPTARG ;;
		w) stream_width=$OPTARG ;;
		x) one_time="true" ;;
		*) show_help && exit ;;
	esac
done


record_mount=${record_mount%/}
record_device_path=${record_device_path%/}

[ -z "$record_mount"     ] && hesitate "Mountpoint record_mount is not set"
mountpoint -q "$record_mount" || hesitate "Mountpoint $record_mount is not mounted"
[ -w "$record_mount"     ] || hesitate "Mountpoint $record_mount is not writable"
[ -z "$record_duration"  ] && record_duration=10
[ -z "$record_filename"  ] && record_filename="%hostname/%Y/%m/%d/%H-%M-%S"
[ -z "$record_videofmt"  ] && record_videofmt="mp4"
rtsp_username=$(read_config "username" "thingino")
rtsp_password=$(read_config "password" "thingino")
[ -z "$stream_number"    ] && stream_number=0
# FIXME: based on default stream endpoint name, won't work on custom endpoints
stream_endpoint="ch$stream_number"
[ -z "$stream_fps"       ] && stream_fps=$(read_fps "25")
[ -z "$stream_height"    ] && stream_height=$(read_size "7" "1080")
[ -z "$stream_width"     ] && stream_width=$(read_size "5" "1920")
[ -z "$align_minutes" ] && align_minutes="true"                                    


log "
stream_number: $stream_number
stream_endpoint: $stream_endpoint
stream_fps: $stream_fps
stream_height: $stream_height
stream_width: $stream_width
"

[ -z "$stream_number"   ] && die "Cannot determine stream humber"
[ -z "$stream_endpoint" ] && die "Cannot determine stream endpoint"
[ -z "$stream_fps"      ] && die "Cannot determine stream fps"
[ -z "$stream_height"   ] && die "Cannot determine stream height"
[ -z "$stream_width"    ] && die "Cannot determine stream width"

case "$record_videofmt" in
	avi) vformat="-i" ;;
	mov) vformat="-q -y -H" ;;
	mp4) vformat="-4 -y -H" ;;
	  *) die "Unknown video format $record_videofmt"
esac



touch $RECORD_FLAG


record_storage="$record_mount/$record_device_path"
if [ ! -d "$record_storage" ]; then
	log "Creating $record_storage"
	mkdir -p "$record_storage" || die "Cannot create directory $record_storage"
fi
[ -w "$record_storage" ] || die "Cannot write to $record_storage"

record_limit_kb=$((record_limit * 1024 * 1024)) # GiB to KiB
required_space=$((100 * record_duration)) # KiB

if [ -z "$one_time" ]; then
  /sbin/rarchive p="$$"  & 
  archive_pid=$!
  log "Spun up rarchive $archive_pid"


# Set a trap to call cleanup when the script exits
trap cleanup EXIT

else
        get_free_space                                                             
        if [ "$available_space" -le "$required_space" ]; then                      
                log "Space required: $required_space KiB"                                        
                log "Not enough space: $required_space > $available_space"                       
                while [ "$available_space" -le "$required_space" ]; do                           
                        remove_oldest_file_in "$record_storage"                                  
                        get_free_space                                                           
                        has_files "$record_storage" || die "$record_mount is empty yet no space!"                                                                                               
                done                                                                                  
        fi      

  if [ "$record_limit_kb" -gt 0 ]; then                                                        
        log "Space limit: $record_limit_kb KiB"                                                  
        get_occupied_space                                                                       
        while [ "$((occupied_space + required_space))" -gt "$record_limit_kb" ]; do              
            log "Occupied space $occupied_space KiB exceeds limit $record_limit_kb KiB"          
            remove_oldest_file_in "$record_storage"                                              
            get_occupied_space                                                                   
            has_files "$record_storage" || die "$record_mount is empty yet no space!"            
        done                                                                                     
    fi         
fi

while :; do
	[ -f $RECORD_FLAG ] || break

	record_file="$record_storage/$(date +"$record_filename").$record_videofmt"
	create_directory_for "$record_file"

        real_duration=$(fix_duration $record_duration)                                               
                                          
        log "openRTSP -u $rtsp_username $rtsp_password  -w $stream_width -h $stream_height -f $stream_fps -d $real_duration $vformat -b 1048576 -t rtsp://[::1]/$stream_endpoint > $record_file"
        openRTSP -u $rtsp_username $rtsp_password  -w $stream_width -h $stream_height -f $stream_fps \
                -d $real_duration $vformat -b 1048576 -t rtsp://[::1]/$stream_endpoint > "$record_file" 2> /dev/null
                                                   

	[ "true" = "$one_time" ] && rm $RECORD_FLAG
done

log "Cannot find recording flag $RECORD_FLAG"
[ -n "$LEDD_FLAG" ] && [ -f "$LEDD_FLAG" ] && rm $LEDD_FLAG
log "Exit"

rm "/tmp/rarchive.$archive_pid"

exit 0
