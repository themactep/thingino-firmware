#!/bin/sh

. /usr/share/common

ensure_command "openRTSP"

STREAMER_APP="prudynt"
STREAMER_CONF_FILE="/etc/prudynt.cfg"

SELF_NAME="$(basename "$0")"

if ! is_streamer_running; then
	echo_error "Streamer is not running"
	exit 1
fi

if is_streamer_disabled; then
	echo_error "Streamer disabled"
	exit 1
fi

hesitate() {
	echo_info "$1"
	sleep 5
	exit 0
}

uptimecs()
{
echo $(awk -F. '{print $2+0}' /proc/uptime)
}


find_cs()
{
u1=$(uptimecs)
s1=$(date +%S)
s2="$s1"
while [ "$s2" = "$s1" ]; do
    sleep 0.05
    s2=$(date +%S)
    u2=$(uptimecs)
done
    echo "$u2" 
}


fix_duration() {                      
        if [ "$align_minutes" = "false" ]; then
                echo "$1"
        elif [ "$1" -eq 60 ]; then                          
                n_cs=$(uptimecs) || n_cs=0
        s=$(date +%S | sed 's/^0//') || s=0
        bonus_cs=0                                                            
        if [ "$n_cs" -gt "$offset_cs" ]; then
                s=$((s - 1))
                bonus_cs=100                   
        fi
        dpart=$(( bonus_cs +offset_cs - n_cs ))   
                [ "$dpart" -lt 10 ] && dpart="0$dpart"
                spart=$(( $1 - s ))               
                echo "$spart.$dpart"
    elif [ $(( $1 % 60 )) -eq 0 ]; then
        m_inc=$(( $1 / 60 ))
        mpart=$(( m_inc - ( $(date +%M) % m_inc ) ))
        echo $(( mpart * 60 ))   
    else               
        echo "$1"                                
    fi                                       
} 


get_free_space() {
	available_space=$(df -k "$record_mount" | sed 1d | tr -d '\n' | awk 'END{print $4}') # in KiB
	echo_info "Space available: $available_space KiB"
}

get_occupied_space() {
	occupied_space=$(du -s "$record_storage" | awk '{print $1}') # in KiB
	echo_info "Space occupied: $occupied_space KiB"
}

# "parameter" "default"
read_config() {
	sed -nE "s/^.*$1\s*[:=]\s*\"?([^\"]+)\"?;.*$/\1/p" $STREAMER_CONF_FILE | head -1
	[ -z "$_" ] || echo "$2"
}

# "default"
read_fps() {
	logcat | grep "fps" | head -1 | awk -F '[=,]' '{print $2}'
	[ -z "$_" ] || echo "$1"
}

# "parameter" "default"
read_size() {
	logcat | grep "VBMCreatePool()-${stream_number}: w=" | head -1 | awk -F '[= ]' "{print \$$1}"
	[ -z "$_" ] || echo "$2"
}

# "path"
remove_oldest_file_in() {
	[ -z "$del_count" ] && del_count=10

	log "started removing old files started"
	# Find oldest files, limited to del_count
    oldest_files=$(find "$1" -type f -exec ls -ltr {} + | head -n"$del_count" | awk '{print $9}')

    # Check if any files were found
    if [ -z "$oldest_files" ]; then
        echo "No files found to delete in $1" >&2
        return 1
    fi

    echo "$oldest_files" | while IFS= read -r oldest_file; do
        if [ -n "$oldest_file" ]; then
            oldest_file_dir=$(dirname "$oldest_file")
            rm -v "$oldest_file"
            # Remove directory if empty
            if [ -z "$(ls -A "$oldest_file_dir" 2>/dev/null)" ]; then
                rm -rv "$oldest_file_dir"
		if [ "$record_dir_count" -gt 1 ]; then
    			parent_dir=$(dirname "$oldest_file_dir")
    			if [ -n "$parent_dir" ] && [ -z "$(ls -A "$parent_dir" 2>/dev/null)" ]; then
        			rm -rv "$parent_dir"
    			fi
		fi   
         	fi
        fi
    done

    log "remove_oldest_file_in finished "
}

has_files() {
	[ "$(find "$1" -type f | wc -l)" -gt 0 ]
}

show_help() {
	usage "[<params>]
Where params are:
	-u <string>  RTSP username
	-p <string>  RTSP password
	-c <int>     RTSP stream number
	-h <int>     Frame height
	-w <int>     Frame width
	-f <int>     Frames per second
	-t <int>     Duration in seconds
	-v <str>     Record video format
	-m <path>    Mount point for storing files
	-s <path>    Subdirectory for the device
	-n <string>  File name template (supports strftime format)
	-d <int>     Maximum disk usage, GiB
	-x           One-time run
"
}

singleton "$0"

RECORD_FLAG="/tmp/record.$$"

while getopts "c:d:f:h:m:n:p:s:t:u:v:w:xz:" flag; do
	case "$flag" in
		c) stream_number=$OPTARG ;;
		d) record_limit=$OPTARG ;;
		f) stream_fps=$OPTARG ;;
		h) stream_height=$OPTARG ;;
		m) record_mount=$OPTARG ;;
		n) record_filename=$OPTARG ;;
		p) rtsp_password=$OPTARG ;;
		s) record_device_path=$OPTARG ;;
		t) record_duration=$OPTARG ;;
		u) rtsp_username=$OPTARG ;;
		v) record_videofmt=$OPTARG ;;
		w) stream_width=$OPTARG ;;
		x) one_time="true" ;;
		*) show_help && exit ;;
	esac
done
shift "$((OPTIND - 1))"

record_mount=${record_mount%/}
record_device_path=${record_device_path%/}

if [ -z "$record_mount" ]; then
	hesitate "Mountpoint record_mount is not set"
fi

if ! mountpoint -q "$record_mount"; then
	hesitate "Mountpoint $record_mount is not mounted"
fi

if [ ! -w "$record_mount" ]; then
	hesitate "Mountpoint $record_mount is not writable"
fi

if [ -z "$record_duration" ]; then
	record_duration=10
fi

if [ -z "$record_filename" ]; then
	record_filename="%hostname/%Y/%m/%d/%H-%M-%S"
fi

if [ -z "$record_videofmt" ]; then
	record_videofmt="mp4"
fi

if [ -z "$stream_number" ]; then
	stream_number=0
fi

if [ -z "$stream_fps" ]; then
	stream_fps=$(read_fps "25")
fi

if [ -z "$stream_height" ]; then
	stream_height=$(read_size "7" "1080")
fi

if [ -z "$stream_width" ]; then
	stream_width=$(read_size "5" "1920")
fi

if [ -z "$align_minutes" ]; then
	align_minutes="true"
fi
if [ "$align_minutes" = "true" ]; then
	offset_cs=$(find_cs)
	echo_info "Offset centoseconds vs run start is $offset_cs"
fi

# FIXME: based on default stream endpoint name, won't work on custom endpoints
stream_endpoint="ch$stream_number"

rtsp_stream="rtsp://127.0.0.1/$stream_endpoint"

rtsp_username=$(read_config "username" "thingino")

rtsp_password=$(read_config "password" "thingino")


echo_info "
stream_number: $stream_number
stream_endpoint: $stream_endpoint
stream_fps: $stream_fps
stream_height: $stream_height
stream_width: $stream_width
"

if [ -z "$stream_number" ]; then
	echo_error "Cannot determine stream number"
fi

if [ -z "$stream_endpoint" ]; then
	echo_error "Cannot determine stream endpoint"
fi

if [ -z "$stream_fps" ]; then
	echo_error "Cannot determine stream fps"
fi

if [ -z "$stream_height" ]; then
	echo_error "Cannot determine stream height"
fi

if [ -z "$stream_width" ]; then
	echo_error "Cannot determine stream width"
fi

case "$record_videofmt" in
	avi) vformat="-i" ;;
	mov) vformat="-q -y -H" ;;
	mp4) vformat="-4 -y -H" ;;
	  *) echo_error "Unknown video format $record_videofmt"
esac

touch $RECORD_FLAG

record_storage="$record_mount/$record_device_path"
ensure_dir "$record_storage"

record_dir_count=0
after_percent="${record_filename#*%}"  # Remove everything before and including the first %
record_dir_count=$(echo "$after_percent" | tr -cd '/' | wc -c)
record_limit_kb=$((record_limit * 1024 * 1024)) # GiB to KiB
required_space=$((100 * record_duration)) # KiB


fmanager() {
    check_so=0

    while :; do
        get_free_space

        # Initial space check (always run)
        if [ "$available_space" -le "$required_space" ]; then
            log "Space required: $required_space KiB"
            log "Not enough space: $required_space > $available_space"
            while [ "$available_space" -le "$required_space" ]; do
                remove_oldest_file_in "$record_storage"
                get_free_space
                has_files "$record_storage" || die "$record_mount is empty yet no space!"
            done
        fi

        # Detailed checks when check_so <= 0
        if [ "$check_so" -le 0 ]; then
            get_free_space
            if [ "$available_space" -le "$required_space" ]; then
                echo_info "Space required: $required_space KiB"
                echo_warning "Not enough space: $required_space > $available_space"
                while [ "$available_space" -le "$required_space" ]; do
                    remove_oldest_file_in "$record_storage"
                    get_free_space
                    if ! has_files "$record_storage"; then
                        echo_error "$record_mount is empty yet no space!"
                        exit 1
                    fi
                done
            fi

            if [ "$record_limit_kb" -gt 0 ]; then
                echo_info "Space limit: $record_limit_kb KiB"
                get_occupied_space
                while [ "$((occupied_space + required_space))" -gt "$record_limit_kb" ]; do
                    echo_warning "Occupied space $occupied_space KiB exceeds limit $record_limit_kb KiB"
                    remove_oldest_file_in "$record_storage"
                    get_occupied_space
                    if ! has_files "$record_storage"; then
                        echo_error "$record_mount is empty yet no space!"
                        exit 1
                    fi
                done
            fi
            # Reset check_so or adjust as needed (assuming it should reset)
            check_so=0  # Optional: adjust this logic if it should increment instead
        else
            check_so=$((check_so - 1))
        fi

        sleep "$record_duration"
    done
}

# Function to clean up the subprocess                                                                 
cleanup() {                                                                                                         
    if [ -n "$archive_pid" ] && kill -0 "$archive_pid" 2>/dev/null; then
        echo_warning "Parent exiting, killing subprocess $archive_pid..."                  
        kill -TERM "$archive_pid"                                          
    fi                                                                             
}    

if [ -z "$one_time" ]; then
  fmanager  & 
  archive_pid=$!
  log "Spun up rarchive $archive_pid"
  trap cleanup EXIT

else
	get_free_space
	if [ "$available_space" -le "$required_space" ]; then
		echo_info "Space required: $required_space KiB"
		echo_warning "Not enough space: $required_space > $available_space"
		while [ "$available_space" -le "$required_space" ]; do
			remove_oldest_file_in "$record_storage"
			get_free_space
			if ! has_files "$record_storage"; then
				echo_error "$record_mount is empty yet no space!"
				exit 1
			fi
		done
	fi

	if [ "0$record_limit_kb" -gt 0 ]; then
		echo_info "Space limit: $record_limit_kb KiB"
		get_occupied_space
		while [ "$((occupied_space + required_space))" -gt "$record_limit_kb" ]; do
			echo_warning "Occupied space $occupied_space KiB exceeds limit $record_limit_kb KiB"
			remove_oldest_file_in "$record_storage"
			get_occupied_space
			if ! has_files "$record_storage"; then
				echo_error "$record_mount is empty yet no space!"
				exit 1
			fi
		done
	fi
fi


while : ; do
	[ -f $RECORD_FLAG ] || break

	record_file="$record_storage/$(date +"$record_filename").$record_videofmt"
	ensure_dir "$(dirname $record_file)"

	real_duration=$(fix_duration $record_duration)

	command="openRTSP -V -u $rtsp_username $rtsp_password -w $stream_width -h $stream_height -f $stream_fps -d $real_duration $vformat -b 1048576 -t $rtsp_stream > \"$record_file\""
	echo_command "$command"
	timeout $((record_duration + 5)) sh -c "$command" 2> /dev/null &
	opid=$!
	start_time=$(date +%s)
	end_time=$((start_time + record_duration + 5))
	# Loop until process dies or time elapses
	while [ "$(date +%s)" -lt "$end_time" ]; do
    	# Check if the process is still alive
    		if ! kill -0 "$opid" 2>/dev/null; then
        		break
    		fi
    		sleep 1  # Check every second
	done

	# If the process is still alive after run_duration + 10, kill it
	if kill -0 "$opid" 2>/dev/null; then
		echo_warning "entered test loop for overrun"
    		kill -HUP "$opid" 2>/dev/null                              
    		end_time=$((end_time + 5))
    		while [ "$(date +%s)" -lt "$end_time" ]; do                                            
    			if ! kill -0 "$opid" 2>/dev/null; then                                              
				break
    			fi
   			sleep 1
   		done
		if kill -0 "$opid" 2>/dev/null; then                                                       
   			echo_warning "Time limit exceeded, killing process $opid."
    			kill -TERM "$opid" 2>/dev/null
		fi
	fi

	[ "true" = "$one_time" ] && rm $RECORD_FLAG
done

echo_warning "Cannot find recording flag $RECORD_FLAG"
[ -n "$LEDD_FLAG" ] && [ -f "$LEDD_FLAG" ] && rm $LEDD_FLAG
echo_info "Exit"

exit 0
